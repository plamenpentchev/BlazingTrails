@page "/edit-trail/{TrailId:int}"
@using BlazingTrails.Shared.Features.ManageTrails.EditTrail;

@inject IMediator Mediator

<PageTitle>Edit Trail - Blazing Trails</PageTitle>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            Edit Trail
        </li>
    </ol>
</nav>
@if (_isLoading)
{
    <p>Loading trail...</p>
}
else
{
    <h3 class="mt-5 mb-4">Editting trail @_trail.Name</h3>
    @if (_submitSuccessfull)
    {
        <SuccessAlert Message="Your trail has been loaded successfully"></SuccessAlert>
    }else if(_errorMessage is not null)
    {
        <ErrorAlert ErrorMessage="@_errorMessage"></ErrorAlert>
    }
    <TrailForm OnSubmit="SubmitEditTrail" Trail="_trail"></TrailForm>
}


@code {
    [Parameter]
    public int TrailId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        var response = await Mediator.Send(new GetTrailRequest(TrailId));
        if (response.Trail is null)
        {
            _errorMessage = "There was a problem loading the trail";
            _submitSuccessfull = false;
            _isLoading = false;
            StateHasChanged();
            return;
        }
        _trail.Id = response.Trail.Id;
        _trail.Name = response.Trail.Name;
        _trail.Location = response.Trail.Location;
        _trail.Description = response.Trail.Description;
        _trail.Image = response.Trail.Image;
        _trail.Length = response.Trail.Length;
        _trail.TimeInMinutes = response.Trail.TimeInMinutes;
        _trail.Route.Clear();
        _trail.Route.AddRange(response.Trail.RouteInstructions
            .Select( x => new TrailDto.RouteInstruction()
            {
                Stage = x.Stage,
                Description = x.Description
            }));
        _isLoading = false;
    }

    private bool _isLoading = false;
    private TrailDto _trail = new TrailDto();
    private bool  _submitSuccessfull = false;
    private string? _errorMessage = default!;

    private async Task SubmitEditTrail(TrailDto trail, IBrowserFile image)
    {
        var response = await Mediator.Send(new EditTrailRequest(trail));
        if (!response.IsSuccess)
        {
            _errorMessage = "There was a problem saving your trail.";
            _submitSuccessfull = false;
            StateHasChanged();
            return;
        }else
        {

            _trail.Name = trail.Name;
            _trail.Location = trail.Location;
            _trail.Description = trail.Description;
            _trail.Image = trail.Image;
            _trail.Length = trail.Length;
            _trail.TimeInMinutes = trail.TimeInMinutes;
            _trail.Route.Clear();
            _trail.Route.AddRange(trail.Route
                .Select(x => new TrailDto.RouteInstruction()
                    {
                        Stage = x.Stage,
                        Description = x.Description
                    }));
            _submitSuccessfull = true;
            if (trail.ImageAction == ImageAction.Add)
            {
                _submitSuccessfull = await ProcessImage(trail.Id,image);
            }
            if (trail.ImageAction == ImageAction.Remove)
            {
                _trail.Image = "";
            }
        }

        StateHasChanged();
    }

    private async Task<bool> ProcessImage(int trailId, IBrowserFile trailImage)
    {
        var uploadTrailImageResponse = await Mediator.Send(new UploadTrailImageRequest(trailId, trailImage));
        if (string.IsNullOrEmpty(uploadTrailImageResponse.ImageName))
        {
            _errorMessage = "Your Trail was saved, but htere was a problem uploading the image.";
            return false;
        }
        _trail.Image = uploadTrailImageResponse.ImageName;
        return true;
    }
}
