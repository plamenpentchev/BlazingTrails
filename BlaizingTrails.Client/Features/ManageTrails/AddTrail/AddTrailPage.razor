@page "/add-trail"

@inject IMediator Mediator

<PageTitle>Add Trail - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"> <a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Trail</li>
    </ol>
</nav>
<h3 class="mt-5 mb-4">Add a trail</h3>

@if (_submitSuccessful)
{
    <SuccessAlert Message="Your trail has been submitted successfully!"></SuccessAlert>
}
else if (_errorMessage is not null)
{
    <ErrorAlert ErrorMessage="@_errorMessage"></ErrorAlert>
}

<TrailForm OnSubmit="SubmitNewTrail" @ref="_trailForm"></TrailForm>

@code {
    private TrailForm _trailForm = default!;
    private bool _submitSuccessful = false;
    private string? _errorMessage;

    private async Task<bool> ProcessImage(int trailId, IBrowserFile trailImage)
    {
        var uploadTrailImageResponse = await Mediator.Send(new UploadTrailImageRequest(trailId, trailImage));
        if (string.IsNullOrEmpty(uploadTrailImageResponse.ImageName))
        {
            _errorMessage = "Your Trail was saved, but htere was a problem uploading the image.";
            return false;
        }
        return true;
    }

    private async Task SubmitNewTrail(TrailDto trail, IBrowserFile image)
    {
        try
        {
            //.. submit data to the API, dispatch to handler
            var response = await Mediator.Send(new AddTrailRequest(trail));
            if (response.TrailId == -1)
            {
                _errorMessage = "There was a problem saving your trail.";
                _submitSuccessful = false;
                StateHasChanged();
                return;
            }
            _submitSuccessful = true;
            if (image is not null)
            {
                await ProcessImage(response.TrailId, image);
            }
           
            _trailForm.ResetForm();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _submitSuccessful = false;
            StateHasChanged();
        }
        
    }


}


