@page "/search"
@page "/search/{SearchTerm?}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"


@inject IMediator Mediator

<PageTitle>Search Trails- Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            Search
        </li>
    </ol>
</nav>


@if (_searchResults is  null)
{
    <p>Loading search results ... </p>
}
else
{
    <h3 class="mt-5 mb-4">Search results for @SearchTerm</h3>
    <SearchFilter SearchTerm="@SearchTerm" MaxLength="MaxLength" MaxTime="MaxTime"></SearchFilter>
    <TrailDetails Trail="@_selectedTrail"></TrailDetails>
    <div class="grid">
        @foreach (Trail trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected"></TrailCard>
        }
    </div>
}

@code {
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public int? MaxLength { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }
    // [Parameter]
    // public IEnumerable<Trail>? AllTrails { get; set; }

    private IEnumerable<Trail>? _searchResults = Array.Empty<Trail>();
    private IEnumerable<Trail> _cachedSearchResults = Array.Empty<Trail>();
    private Trail? _selectedTrail;
    private void HandleTrailSelected(Trail t) => _selectedTrail = t;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            // if (AllTrails is null)
            // {
            //     AllTrails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
            // }
            // _searchResults = AllTrails?.Where(t => t.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            //                                             t.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));

            var tmp = (await Mediator.Send(new GetTrailsRequest())).Trails;
            var filtered = tmp.Where(t => t.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                                       t.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            _searchResults = filtered.Select(x => new Trail()
                {
                    Id = x.Id,
                    Name = x.Name,
                    Location = x.Location,
                    Description = x.Description,
                    TimeInMinutes = x.TimeInMinutes,
                    Image = x.Image ?? "",
                    Length = x.Length
                });

            _cachedSearchResults = _searchResults ?? Array.Empty<Trail>();
            UpdateFilters();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
        }
    }

    protected override void OnParametersSet() => UpdateFilters();
    private void UpdateFilters()
    {
        _selectedTrail = null;
        _searchResults = _cachedSearchResults;
        var filters = new List<Func<Trail, bool>>();

        if (MaxLength is not null && MaxLength.Value > 0)
            filters.Add(x => x.Length <= MaxLength.Value);

        if (MaxTime is not null && MaxTime.Value > 0)
            filters.Add(x => x.TimeInMinutes <= MaxTime * 60);

        if (filters.Any())
        {
            _searchResults = _cachedSearchResults
                .Where(trail => filters.All(filter => filter(trail)));
        }
        else
        {
            _searchResults = _cachedSearchResults;
        }

    }
    private void UpdateFilters_1()
    {
        _selectedTrail = null;
        _searchResults = _cachedSearchResults;
        if (_cachedSearchResults.Any() && !MaxLength.HasValue && !MaxTime.HasValue)
        {
            return;
        }
        if (_searchResults.Any() && MaxTime.HasValue)
        {
            _searchResults = _searchResults.Where(t => t.TimeInMinutes / 60 < MaxTime.Value);

        }
        if (_searchResults.Any() && MaxLength.HasValue)
        {
            _searchResults = _searchResults.Where(t => t.Length < MaxLength.Value);

        }
    }

}
